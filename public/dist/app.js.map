{"version":3,"sources":["webpack:///./app/assets/index.js","webpack:///./app/assets/components/index.js","webpack:///./app/assets/components/matrix/index.js","webpack:///./app/assets/components/matrixarea/index.js","webpack:///./app/assets/common/Directive.js","webpack:///./app/assets/components/matrixarea/matrixarea.css","webpack:///./app/assets/components/matrix/matrix.css","webpack:///./app/assets/components/navbar/index.js","webpack:///./app/assets/services/index.js","webpack:///./app/assets/services/task/index.js","webpack:///./app/assets/common/Service.js","webpack:///./app/assets/services/task/Task.js","webpack:///./app/assets/providers/index.js","webpack:///./app/assets/providers/ModalProvider.js","webpack:///./~/ng-dialog/js/ngDialog.js","webpack:///./~/ng-dialog/css/ngDialog.min.css","webpack:///./~/ng-dialog/css/ngDialog-theme-default.min.css","webpack:///./app/assets/app.global.css","webpack:///./app/assets/app.css"],"names":[],"mappings":"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DK;QAJP;AAOA,cAAO,KAAK,QAAL,CAAc,WAAd,CAA0B;AAC/B,mBAAa,iBAAY,OAAzB;AACA,oBAAW,wBAAX;AACA,gBAAO,IAAP;QAHK,CAAP,CAtBiD;;;;0BA4B9C,SAAS;AACZ,cAAO,KAAK,QAAL,CAAc,IAAd;AACL,gBAAO,IAAP;AACA,oBAAW,wBAAX;UACG,QAHE,CAAP,CADY;;;;UAlCV;;;eACG,UAAU;mBA0CJ,2BAAa,eAAb,EAA8B,aAA9B,EAA6C,oBAA7C,E;;;;;;AC9Cf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,EAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sCAAqC;AACrC,kCAAiC;AACjC;AACA;AACA,sCAAqC;AACrC;AACA,sCAAqC;AACrC;AACA,8BAA6B;AAC7B;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;;AAEA,wCAAuC,gBAAgB;AACvD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;;AAEA,wCAAuC,gBAAgB;AACvD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAA+B,OAAO;AACtC,oCAAmC,OAAO;AAC1C,iCAAgC,QAAQ;AACxC,iCAAgC;AAChC,sCAAqC;AACrC,wCAAuC;AACvC,qCAAoC,OAAO;AAC3C,2CAA0C,OAAO;AACjD,4CAA2C,QAAQ;AACnD,qCAAoC,QAAQ;AAC5C,yCAAwC,QAAQ;AAChD,2CAA0C,QAAQ;AAClD,4CAA2C,gBAAgB;AAC3D,yCAAwC,OAAO;AAC/C,iCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,wDAAuD;;AAEvD;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,yEAAwE;AACxE;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA,0CAAyC;AACzC;AACA,0CAAyC;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;;AAEA;AACA,kFAAiF,uGAAuG;AACxL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,+EAA8E,oCAAoC;AAClH,kCAAiC;AACjC;AACA;AACA,8BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;;AAEA;AACA,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iEAAgE;AAChE;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+DAA8D,aAAa;AAC3E;;AAEA,2DAA0D,sBAAsB;AAChF;AACA,sBAAqB;;AAErB;AACA,gCAA+B,OAAO;AACtC,oCAAmC,OAAO;AAC1C,iCAAgC,QAAQ;AACxC,gCAA+B;AAC/B,iCAAgC;AAChC,sCAAqC;AACrC,wCAAuC;AACvC,qCAAoC,OAAO;AAC3C,2CAA0C,OAAO;AACjD,qCAAoC,QAAQ;AAC5C,yCAAwC,QAAQ;AAChD,2CAA0C,QAAQ;AAClD,4CAA2C,gBAAgB,8EAA8E;AACzI,yCAAwC,OAAO;AAC/C;AACA,iCAAgC,OAAO;AACvC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,gCAA+B,OAAO;AACtC,iCAAgC,OAAO;AACvC;AACA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;;AAEA;AACA,sDAAqD,QAAQ;AAC7D;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA,cAAa;AACb,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA,MAAK;;AAEL;AACA,EAAC;;;;;;;AC31BD,0C;;;;;;ACAA,0C;;;;;;ACAA,0C;;;;;;ACAA;AACA,mBAAkB,sG","file":"app.js","sourcesContent":["import angular from 'angular';\nimport angularRoute from 'angular-route';\nimport { allComponents } from './components';\nimport { allServices, TaskService } from './services';\nimport { allProviders, ModalProvider } from './providers';\nimport Task from './services/task/Task';\n\nimport 'ng-dialog/css/ngDialog.min.css';\nimport 'ng-dialog/css/ngDialog-theme-default.min.css';\nimport './app.global.css';\nimport style from './app.css';\n\n\nlet template = `\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"btn btn-primary pull-right\" ng-click=\"app.openTask()\"><i class=\"glyphicon glyphicon-plus\"></i> Add New Task</div>      \n        </div> \n    </div>\n  </div>\n  <matrix tasks=\"app.tasks\" ontaskclicked=\"app.openTask(task)\" ontaskupdated=\"app.updateTask(task)\"></matrix>\n`;\nlet editorTemplate = `\n<div class=\"container-fluid ${style.editorDialog}\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">Task</div>\n    <div class=\"col-md-10\"><textarea placeholder=\"Enter your task here.\" class=\"${style.txtArea}\" ng-model=\"app.editedTask.message\"></textarea></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-2\">Urgency</div>\n    <div class=\"col-md-10\"><input type=\"range\" ng-model=\"app.editedTask.urgency\" max=\"10\" min=\"1\" step=\"1\" /></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-2\">Importance</div>\n    <div class=\"col-md-10\"><input type=\"range\" ng-model=\"app.editedTask.importance\" max=\"10\" min=\"1\" step=\"1\"/></div>\n  </div>\n  <div class=\"ngdialog-buttons pt1\">\n    <button type=\"button\" class=\"ngdialog-button ngdialog-button-primary\" ng-click=\"app.saveTask()\">Save</button>\n    <button type=\"button\" class=\"ngdialog-button ngdialog-button-secondary\" ng-click=\"closeThisDialog(0)\">Cancel</button>\n  </div>\n</div>`;\nclass AppCtrl {\n  static $inject = ['$scope', '$element', TaskService, ModalProvider];\n\n  constructor($scope, $element, taskService, modal) {\n    this.tasks = [];\n    this.modal = modal;\n    this.$scope = $scope;\n    this.$element = $element;\n    this.taskService = taskService;\n\n    angular.element($element).addClass(style.app);\n\n    this.updateTaskList();\n  }\n  updateTaskList(callback) {\n    const promise = this.taskService.getList().then((tasks) => {\n      this.tasks = tasks;\n    });\n    if (callback) {\n      promise.then(callback);\n    }\n  }\n  openTask(task) {\n    this.editedTask = Task.clone(task) || new Task();\n\n    this.taskEditor = this.modal.open({template: editorTemplate, scope: this.$scope});\n    this.taskEditor.closePromise.then(() => {\n      // Do memory cleaning when dialog closes\n      delete this.taskEditor;\n    });\n  }\n  saveTask() {\n    this.updateTask(this.editedTask).then(() => {\n      if (this.taskEditor) {\n        this.taskEditor.close(1);\n      }\n    }, (error) => {\n        alert(error.message);\n    });\n  }\n  updateTask(task) {\n    return this.taskService.saveTask(task).then((task) => {\n      let idMatches = this.tasks.filter((item) => { return item.id === task.id });\n\n      if(idMatches.length) {\n        idMatches[0].fromObject(task);\n      } else {\n        this.tasks.push(task);\n      }\n      this.tasks = [...this.tasks];\n    });\n  }\n}\n\nconst MODULE_NAME = 'app';\nangular.module(MODULE_NAME, [\n  angularRoute,\n  ...allServices(),\n  ...allComponents(),\n  ...allProviders()\n]).\nconfig(['$routeProvider',\n  function($routeProvider) {\n    $routeProvider.\n    when('/app', {\n      template: `\n        <app class=\"cover\">\n          Loading...\n        </app>\n      `\n    }).\n    when('/settings', {\n      template: `\n        <div>Settings</div>\n      `\n    }).\n    otherwise({\n      redirectTo: '/app'\n    });\n  }]).\ndirective('app', () => {\n  return {\n    template,\n    controller: AppCtrl,\n    controllerAs: 'app'\n  }\n});\n\nexport default MODULE_NAME;\n\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/index.js\n **/","import Matrix from './matrix';\nimport MatrixArea from './matrixarea';\nimport NavBar from './navbar';\n\n\nexport function allComponents() {\n  return [Matrix, MatrixArea, NavBar];\n}\n\nexport { Matrix, MatrixArea, NavBar }\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/components/index.js\n **/","import angular from 'angular';\nimport MatrixArea from '../matrixarea';\nimport { buildDirective } from '../../common/Directive';\nimport style from './matrix.css';\n\nlet template = `\n  <div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-md-2 hidden-sm hidden-xs ${style.matrixarea}\">&nbsp;</div>\n          <div class=\"col-md-5 hidden-sm hidden-xs text-center ${style.matrixarea}\">Urgent</div>\n          <div class=\"col-md-5 hidden-sm hidden-xs text-center ${style.matrixarea}\">Not Urgent</div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-2 hidden-sm hidden-xs\">\n            <div> Important</div>\n          </div>\n          <matrixarea class=\"col-md-5 col-sm-6 col-xs-12 ${style.matrixarea}\" titlestyle=\"'${style.important_urgent}'\" tasks=\"important_urgent\" ontaskupdated=\"taskUpdated(task)\" ontaskclicked=\"taskClicked(task)\" title=\"'Do'\" description=\"'Do it now.'\"></matrixarea>\n          <matrixarea class=\"col-md-5 col-sm-6 col-xs-12 ${style.matrixarea}\" titlestyle=\"'${style.important_noturgent}'\" tasks=\"important_noturgent\" ontaskupdated=\"taskUpdated(task)\"  ontaskclicked=\"taskClicked(task)\" title=\"'Decide'\" description=\"'Schedule a time to do it.'\"></matrixarea>\n        </div>\n        <div class=\"row row-eq-height\">\n          <div class=\"col-md-2 hidden-sm hidden-xs\">\n            <div>Not Important</div>    \n          </div>\n          <matrixarea class=\"col-md-5 col-sm-6 col-xs-12 ${style.matrixarea}\" titlestyle=\"'${style.notimportant_urgent}'\" tasks=\"notimportant_urgent\" ontaskupdated=\"taskUpdated(task)\"  ontaskclicked=\"taskClicked(task)\" title=\"'Delegate'\" description=\"'Who can do it for you?'\"></matrixarea>\n          <matrixarea class=\"col-md-5 col-sm-6 col-xs-12 ${style.matrixarea}\" titlestyle=\"'${style.notimportant_noturgent}'\" tasks=\"notimportant_noturgent\" ontaskupdated=\"taskUpdated(task)\"  ontaskclicked=\"taskClicked(task)\" title=\"'Delete'\" description=\"'Eliminate it.'\"></matrixarea>\n        </div>\n      </div>\n    </div>\n  </div>\n  `;\n\nclass MatrixController {\n  static $inject = ['$scope', '$element', '$parse'];\n\n  constructor($scope, $element) {\n    this.$scope = $scope;\n    this.$element = $element;\n    angular.element($element).addClass(style.matrix);\n\n    this.$scope.$watch('tasks', (newValue) => {\n      this.$scope.important_urgent = newValue.filter(this._taskfilter.bind(this, 5, 10, 5, 10));\n      this.$scope.notimportant_urgent = newValue.filter(this._taskfilter.bind(this, 0, 4, 5, 10));\n      this.$scope.important_noturgent = newValue.filter(this._taskfilter.bind(this, 5, 10, 0, 4));\n      this.$scope.notimportant_noturgent = newValue.filter(this._taskfilter.bind(this, 0, 4, 0, 4));\n    });\n\n    this.link();\n  }\n  link() {\n    this.$scope.taskClicked = this.taskClicked.bind(this);\n    this.$scope.taskUpdated = this.taskUpdated.bind(this);\n  }\n  _taskfilter(minImportance, maxImportance, minUrgency, maxUrgency, item) {\n    return item.importance >= minImportance &&\n      item.importance <= maxImportance &&\n      item.urgency >= minUrgency &&\n      item.urgency <= maxUrgency\n  }\n  taskClicked(task){\n    const expressionHandler = this.$scope.ontaskclicked;\n    if(expressionHandler) {\n      expressionHandler({task: task});\n    }\n  }\n  taskUpdated(task) {\n    const expressionHandler = this.$scope.ontaskupdated;\n    if(expressionHandler) {\n      expressionHandler({task: task});\n    }\n  }\n}\n\nexport default buildDirective(\n  'matrix', MatrixController, {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      tasks: '=',\n      ontaskclicked: '&',\n      ontaskupdated: '&'\n    },\n    template\n  }, [MatrixArea]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/components/matrix/index.js\n **/","import angular from 'angular';\nimport { buildDirective } from '../../common/Directive';\nimport style from './matrixarea.css';\n\nlet template = `\n  <div ng-class=\"titlestyle\" class=\"${style.header}\">\n    <div class=\"pull-right btn btn-default btn-xs\" ng-click=\"toogleShowAll()\">{{showall ? 'Hide' : 'Show'}} Completed</div>\n    <span>{{title}}</span>\n    <span class=\"small\"><br/>{{description}}</span>\n  </div>\n  <ul>\n    <li ng-repeat=\"n in tasks | orderBy:'-urgency'\" ng-class=\"{${style.done}: n.status == 'done'}\" class=\"list-unstyled\" ng-show=\"n.status === 'inprogress' || showall\">\n      <input type=\"checkbox\" ng-model=\"n.status\" ng-true-value=\"'done'\" ng-false-value=\"'inprogress'\" ng-change=\"taskChecked(n)\"/>\n      <span ng-click=\"taskClicked(n)\">\n        {{n.message.split('\\n')[0]}}\n      </span>\n      <span ng-click=\"taskClicked(n)\" class=\"pull-right label label-warning\">U: {{n.urgency}}</span>\n      <span ng-click=\"taskClicked(n)\" class=\"pull-right label label-info\">I: {{n.importance}}</span>\n    </li>\n  </ul>\n  \n`;\n\nclass MatrixAreaController {\n  static $inject = ['$scope', '$element'];\n\n  constructor($scope, $element) {\n    this.$scope = $scope;\n    this.$element = $element;\n\n    angular.element($element).addClass(style.matrixarea);\n\n    this.link();\n  }\n  link() {\n    this.$scope.showall = false;\n    this.$scope.taskClicked = this.taskClicked.bind(this);\n    this.$scope.taskChecked = this.taskChecked.bind(this);\n    this.$scope.toogleShowAll = this.toogleShowAll.bind(this);\n  }\n  taskClicked(task) {\n    const expressionHandler = this.$scope.ontaskclicked;\n    if(expressionHandler) {\n      expressionHandler({task: task});\n    }\n  }\n  taskChecked(task) {\n    const expressionHandler = this.$scope.ontaskupdated;\n    if(expressionHandler) {\n      expressionHandler({task: task});\n    }\n  }\n  toogleShowAll() {\n    this.$scope.showall = !this.$scope.showall;\n  }\n\n}\n\nexport default buildDirective(\n  'matrixarea', MatrixAreaController, {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      tasks: '=', title: '=', description: '=', titlestyle: '=',\n      ontaskclicked: '&', ontaskupdated: '&'\n    },\n    template\n  });\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/components/matrixarea/index.js\n **/","import angular from 'angular';\n\nexport function buildDirective(name, controller, options, dependencies=[]) {\n  let _directive = angular.module(name, dependencies)\n    .directive(name, () => {\n      return {\n        ...options,\n        controller\n      };\n    });\n  return _directive.name;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/common/Directive.js\n **/","// removed by extract-text-webpack-plugin\nmodule.exports = {\"matrixarea\":\"matrixarea__matrixarea___2fwG5\",\"header\":\"matrixarea__header___2i0_y\",\"done\":\"matrixarea__done___1_E_E\"};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/components/matrixarea/matrixarea.css\n ** module id = 9\n ** module chunks = 0\n **/","// removed by extract-text-webpack-plugin\nmodule.exports = {\"matrix\":\"matrix__matrix___2Xvq9\",\"important_urgent\":\"matrix__important_urgent___2BWIs\",\"important_noturgent\":\"matrix__important_noturgent___2Rkl9\",\"notimportant_urgent\":\"matrix__notimportant_urgent___1A3Fs\",\"notimportant_noturgent\":\"matrix__notimportant_noturgent___1YpVs\"};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/components/matrix/matrix.css\n ** module id = 10\n ** module chunks = 0\n **/","import { buildDirective } from '../../common/Directive';\n\nlet template = `\n<nav class=\"navbar navbar-default\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\" href=\"#\">Eisenhover Box</a>\n    </div>\n\n    <div class=\"collapse navbar-collapse\">\n      <ul class=\"nav navbar-nav\">\n        <li ng-class=\"{ active: isActivePath('/app')      }\"><a href=\"#/app\">App</a></li>\n        <li ng-class=\"{ active: isActivePath('/settings') }\"><a href=\"#/settings\">Settings</a></li>\n      </ul>\n    <p class=\"navbar-text navbar-right\"><a href=\"/logout\" class=\"navbar-link\">Logout</a></p>\n    </div>\n  </div>\n</nav>\n`;\n\nclass NavBarController {\n  static $inject = ['$scope', '$location']\n  constructor($scope, $location) {\n    this.$scope = $scope;\n    this.$location = $location;\n\n    this.link();\n  }\n  link() {\n    this.$scope.isActivePath = this.isActivePath.bind(this);\n  }\n  isActivePath(viewLocation) {\n    console.log(viewLocation, this.$location.path());\n    return viewLocation === this.$location.path();\n  };\n}\n\nexport default buildDirective(\n  'navbar', NavBarController, {\n    restrict: 'E',\n    transclude: true,\n    template\n  });\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/components/navbar/index.js\n **/","import TaskService from './task';\n\nexport function allServices() {\n  return [TaskService];\n}\n\nexport { TaskService };\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/services/index.js\n **/","import { buildService } from '../../common/Service';\nimport Task from './Task';\n\nclass TaskService {\n  static $inject = ['$http', '$q'];\n\n  constructor($http, $q) {\n    this.$http = $http;\n    this.$q = $q;\n  }\n  getById(taskID) {\n    const defered = this.$q.defer();\n\n    this.$http.get(`task/${taskID}`).then((response) => {\n      defered.resolve(new Task().fromObject(response));\n    }, (error) => {\n      defered.reject(new Error(error));\n    });\n\n    return defered.promise;\n  }\n  getList() {\n    const defered = this.$q.defer();\n\n    this.$http.get(`task`).then((response) => {\n      const result = response.data.map((item) => {\n        return new Task().fromObject(item);\n      });\n      defered.resolve(result);\n    }, (error) => {\n      defered.reject(new Error(error));\n    });\n\n    return defered.promise;\n  }\n  saveTask(task) {\n    const defered = this.$q.defer();\n\n    if (task.message) {\n      this.$http.post(`task`, task.toObject()).then((response) => {\n        defered.resolve(task.fromObject(response.data));\n      }, (error) => {\n        defered.reject(new Error(error));\n      });\n    } else {\n      defered.reject(new Error(\"Message cannot be empty\"));\n    }\n    \n    return defered.promise;\n  }\n}\n\nexport default buildService('taskService', TaskService);\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/services/task/index.js\n **/","import angular from 'angular';\n\nexport function buildService(name, controller, dependencies=[]) {\n  if (controller.$inject === undefined) {\n    controller.$inject = [];\n  }\n  let _directive = angular.module(name, dependencies)\n    .factory(name, [...controller.$inject, (...args) => {\n      return new controller(...args);\n    }]);\n  return _directive.name;\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/common/Service.js\n **/","export default class Task {\n  constructor(message = '', urgency = 1, importance = 1, status='inprogress', id='') {\n    this.id = id;\n    this.message = message;\n    this.urgency = urgency;\n    this.importance = importance;\n    this.status = status;\n  }\n  fromObject(object) {\n    this.id = object.id;\n    this.message = object.message;\n    this.urgency = object.urgency;\n    this.importance = object.importance;\n    this.status = object.status || 'inprogress';\n    return this;\n  }\n  toObject() {\n    const obj = {};\n    if (this.id) { obj.id = this.id; }\n    obj.message = this.message;\n    obj.urgency = this.urgency;\n    obj.importance = this.importance;\n    obj.status = this.status;\n    return obj;\n  }\n  static clone(task) {\n    if (task === undefined) return undefined;\n    return new Task(task.message, task.urgency, task.importance, task.status, task.id);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/services/task/Task.js\n **/","import ModalProvider from './ModalProvider';\n\n\nexport function allProviders() {\n  return [ ModalProvider ];\n}\n\nexport { ModalProvider }\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/providers/index.js\n **/","import ngDialog from 'ng-dialog';\nimport { buildService } from \"./../common/Service\";\n\nclass ModalProvider {\n  static $inject = [ngDialog];\n\n  constructor(ngDialog) {\n    this.ngDialog = ngDialog;\n  }\n  confirm(template = '', options = ['ok', 'cancel']) {\n    // Returns a promise to confirm box\n    let buttons = options.map((option) => {\n      if (option === \"ok\") {\n        return '<button type=\"button\" class=\"ngdialog-button ngdialog-button-primary\" ng-click=\"confirm(1)\">Ok</button>';\n      }else if (option === \"yes\") {\n        return '<button type=\"button\" class=\"ngdialog-button ngdialog-button-primary\" ng-click=\"confirm(1)\">Yes</button>';\n      }else if (option === \"save\") {\n        return '<button type=\"button\" class=\"ngdialog-button ngdialog-button-primary\" ng-click=\"confirm(1)\">Save</button>';\n      }else if (option === \"cancel\") {\n        return '<button type=\"button\" class=\"ngdialog-button ngdialog-button-secondary\" ng-click=\"closeThisDialog(0)\">Cancel</button>';\n      }else if (option === \"no\") {\n        return '<button type=\"button\" class=\"ngdialog-button ngdialog-button-secondary\" ng-click=\"closeThisDialog(0)\">No</button>';\n      }\n    });\n    if (buttons.length) {\n      buttons = `<div class=\"ngdialog-buttons\">\n                    ${buttons.join(\"\\n\")}\n                </div>`;\n    } else {\n      buttons = '';\n    }\n    return this.ngDialog.openConfirm({\n      template: `${template} ${buttons}`,\n      className: 'ngdialog-theme-default',\n      plain: true\n    });\n  }\n  open(options) {\n    return this.ngDialog.open({\n      plain: true,\n      className: 'ngdialog-theme-default',\n      ...options\n    });\n  }\n}\n\nexport default buildService('modalProvider', ModalProvider, [ngDialog]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/assets/providers/ModalProvider.js\n **/","/*\n * ngDialog - easy modals and popup windows\n * http://github.com/likeastore/ngDialog\n * (c) 2013-2015 MIT License, https://likeastore.com\n */\n\n(function (root, factory) {\n    if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        if (typeof angular === 'undefined') {\n            factory(require('angular'));\n        } else {\n            factory(angular);\n        }\n        module.exports = 'ngDialog';\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['angular'], factory);\n    } else {\n        // Global Variables\n        factory(root.angular);\n    }\n}(this, function (angular) {\n    'use strict';\n\n    var m = angular.module('ngDialog', []);\n\n    var $el = angular.element;\n    var isDef = angular.isDefined;\n    var style = (document.body || document.documentElement).style;\n    var animationEndSupport = isDef(style.animation) || isDef(style.WebkitAnimation) || isDef(style.MozAnimation) || isDef(style.MsAnimation) || isDef(style.OAnimation);\n    var animationEndEvent = 'animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend';\n    var focusableElementSelector = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\n    var disabledAnimationClass = 'ngdialog-disabled-animation';\n    var forceElementsReload = { html: false, body: false };\n    var scopes = {};\n    var openIdStack = [];\n    var keydownIsBound = false;\n    var openOnePerName = false;\n\n\n    m.provider('ngDialog', function () {\n        var defaults = this.defaults = {\n            className: 'ngdialog-theme-default',\n            appendClassName: '',\n            disableAnimation: false,\n            plain: false,\n            showClose: true,\n            closeByDocument: true,\n            closeByEscape: true,\n            closeByNavigation: false,\n            appendTo: false,\n            preCloseCallback: false,\n            overlay: true,\n            cache: true,\n            trapFocus: true,\n            preserveFocus: true,\n            ariaAuto: true,\n            ariaRole: null,\n            ariaLabelledById: null,\n            ariaLabelledBySelector: null,\n            ariaDescribedById: null,\n            ariaDescribedBySelector: null,\n            bodyClassName: 'ngdialog-open'\n        };\n\n        this.setForceHtmlReload = function (_useIt) {\n            forceElementsReload.html = _useIt || false;\n        };\n\n        this.setForceBodyReload = function (_useIt) {\n            forceElementsReload.body = _useIt || false;\n        };\n\n        this.setDefaults = function (newDefaults) {\n            angular.extend(defaults, newDefaults);\n        };\n\n        this.setOpenOnePerName = function (isOpenOne) {\n            openOnePerName = isOpenOne || false;\n        };\n\n        var globalID = 0, dialogsCount = 0, closeByDocumentHandler, defers = {};\n\n        this.$get = ['$document', '$templateCache', '$compile', '$q', '$http', '$rootScope', '$timeout', '$window', '$controller', '$injector',\n            function ($document, $templateCache, $compile, $q, $http, $rootScope, $timeout, $window, $controller, $injector) {\n                var $elements = [];\n\n                var privateMethods = {\n                    onDocumentKeydown: function (event) {\n                        if (event.keyCode === 27) {\n                            publicMethods.close('$escape');\n                        }\n                    },\n\n                    activate: function($dialog) {\n                        var options = $dialog.data('$ngDialogOptions');\n\n                        if (options.trapFocus) {\n                            $dialog.on('keydown', privateMethods.onTrapFocusKeydown);\n\n                            // Catch rogue changes (eg. after unfocusing everything by clicking a non-focusable element)\n                            $elements.body.on('keydown', privateMethods.onTrapFocusKeydown);\n                        }\n                    },\n\n                    deactivate: function ($dialog) {\n                        $dialog.off('keydown', privateMethods.onTrapFocusKeydown);\n                        $elements.body.off('keydown', privateMethods.onTrapFocusKeydown);\n                    },\n\n                    deactivateAll: function (els) {\n                        angular.forEach(els,function(el) {\n                            var $dialog = angular.element(el);\n                            privateMethods.deactivate($dialog);\n                        });\n                    },\n\n                    setBodyPadding: function (width) {\n                        var originalBodyPadding = parseInt(($elements.body.css('padding-right') || 0), 10);\n                        $elements.body.css('padding-right', (originalBodyPadding + width) + 'px');\n                        $elements.body.data('ng-dialog-original-padding', originalBodyPadding);\n                        $rootScope.$broadcast('ngDialog.setPadding', width);\n                    },\n\n                    resetBodyPadding: function () {\n                        var originalBodyPadding = $elements.body.data('ng-dialog-original-padding');\n                        if (originalBodyPadding) {\n                            $elements.body.css('padding-right', originalBodyPadding + 'px');\n                        } else {\n                            $elements.body.css('padding-right', '');\n                        }\n                        $rootScope.$broadcast('ngDialog.setPadding', 0);\n                    },\n\n                    performCloseDialog: function ($dialog, value) {\n                        var options = $dialog.data('$ngDialogOptions');\n                        var id = $dialog.attr('id');\n                        var scope = scopes[id];\n\n                        if (!scope) {\n                            // Already closed\n                            return;\n                        }\n\n                        if (typeof $window.Hammer !== 'undefined') {\n                            var hammerTime = scope.hammerTime;\n                            hammerTime.off('tap', closeByDocumentHandler);\n                            hammerTime.destroy && hammerTime.destroy();\n                            delete scope.hammerTime;\n                        } else {\n                            $dialog.unbind('click');\n                        }\n\n                        if (dialogsCount === 1) {\n                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);\n                        }\n\n                        if (!$dialog.hasClass('ngdialog-closing')){\n                            dialogsCount -= 1;\n                        }\n\n                        var previousFocus = $dialog.data('$ngDialogPreviousFocus');\n                        if (previousFocus && previousFocus.focus) {\n                            previousFocus.focus();\n                        }\n\n                        $rootScope.$broadcast('ngDialog.closing', $dialog, value);\n                        dialogsCount = dialogsCount < 0 ? 0 : dialogsCount;\n                        if (animationEndSupport && !options.disableAnimation) {\n                            scope.$destroy();\n                            $dialog.unbind(animationEndEvent).bind(animationEndEvent, function () {\n                                privateMethods.closeDialogElement($dialog, value);\n                            }).addClass('ngdialog-closing');\n                        } else {\n                            scope.$destroy();\n                            privateMethods.closeDialogElement($dialog, value);\n                        }\n                        if (defers[id]) {\n                            defers[id].resolve({\n                                id: id,\n                                value: value,\n                                $dialog: $dialog,\n                                remainingDialogs: dialogsCount\n                            });\n                            delete defers[id];\n                        }\n                        if (scopes[id]) {\n                            delete scopes[id];\n                        }\n                        openIdStack.splice(openIdStack.indexOf(id), 1);\n                        if (!openIdStack.length) {\n                            $elements.body.unbind('keydown', privateMethods.onDocumentKeydown);\n                            keydownIsBound = false;\n                        }\n                    },\n\n                    closeDialogElement: function($dialog, value) {\n                        var options = $dialog.data('$ngDialogOptions');\n                        $dialog.remove();\n                        if (dialogsCount === 0) {\n                            $elements.html.removeClass(options.bodyClassName);\n                            $elements.body.removeClass(options.bodyClassName);\n                            privateMethods.resetBodyPadding();\n                        }\n                        $rootScope.$broadcast('ngDialog.closed', $dialog, value);\n                    },\n\n                    closeDialog: function ($dialog, value) {\n                        var preCloseCallback = $dialog.data('$ngDialogPreCloseCallback');\n\n                        if (preCloseCallback && angular.isFunction(preCloseCallback)) {\n\n                            var preCloseCallbackResult = preCloseCallback.call($dialog, value);\n\n                            if (angular.isObject(preCloseCallbackResult)) {\n                                if (preCloseCallbackResult.closePromise) {\n                                    preCloseCallbackResult.closePromise.then(function () {\n                                        privateMethods.performCloseDialog($dialog, value);\n                                    });\n                                } else {\n                                    preCloseCallbackResult.then(function () {\n                                        privateMethods.performCloseDialog($dialog, value);\n                                    }, function () {\n                                        return;\n                                    });\n                                }\n                            } else if (preCloseCallbackResult !== false) {\n                                privateMethods.performCloseDialog($dialog, value);\n                            }\n                        } else {\n                            privateMethods.performCloseDialog($dialog, value);\n                        }\n                    },\n\n                    onTrapFocusKeydown: function(ev) {\n                        var el = angular.element(ev.currentTarget);\n                        var $dialog;\n\n                        if (el.hasClass('ngdialog')) {\n                            $dialog = el;\n                        } else {\n                            $dialog = privateMethods.getActiveDialog();\n\n                            if ($dialog === null) {\n                                return;\n                            }\n                        }\n\n                        var isTab = (ev.keyCode === 9);\n                        var backward = (ev.shiftKey === true);\n\n                        if (isTab) {\n                            privateMethods.handleTab($dialog, ev, backward);\n                        }\n                    },\n\n                    handleTab: function($dialog, ev, backward) {\n                        var focusableElements = privateMethods.getFocusableElements($dialog);\n\n                        if (focusableElements.length === 0) {\n                            if (document.activeElement) {\n                                document.activeElement.blur();\n                            }\n                            return;\n                        }\n\n                        var currentFocus = document.activeElement;\n                        var focusIndex = Array.prototype.indexOf.call(focusableElements, currentFocus);\n\n                        var isFocusIndexUnknown = (focusIndex === -1);\n                        var isFirstElementFocused = (focusIndex === 0);\n                        var isLastElementFocused = (focusIndex === focusableElements.length - 1);\n\n                        var cancelEvent = false;\n\n                        if (backward) {\n                            if (isFocusIndexUnknown || isFirstElementFocused) {\n                                focusableElements[focusableElements.length - 1].focus();\n                                cancelEvent = true;\n                            }\n                        } else {\n                            if (isFocusIndexUnknown || isLastElementFocused) {\n                                focusableElements[0].focus();\n                                cancelEvent = true;\n                            }\n                        }\n\n                        if (cancelEvent) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        }\n                    },\n\n                    autoFocus: function($dialog) {\n                        var dialogEl = $dialog[0];\n\n                        // Browser's (Chrome 40, Forefix 37, IE 11) don't appear to honor autofocus on the dialog, but we should\n                        var autoFocusEl = dialogEl.querySelector('*[autofocus]');\n                        if (autoFocusEl !== null) {\n                            autoFocusEl.focus();\n\n                            if (document.activeElement === autoFocusEl) {\n                                return;\n                            }\n\n                            // Autofocus element might was display: none, so let's continue\n                        }\n\n                        var focusableElements = privateMethods.getFocusableElements($dialog);\n\n                        if (focusableElements.length > 0) {\n                            focusableElements[0].focus();\n                            return;\n                        }\n\n                        // We need to focus something for the screen readers to notice the dialog\n                        var contentElements = privateMethods.filterVisibleElements(dialogEl.querySelectorAll('h1,h2,h3,h4,h5,h6,p,span'));\n\n                        if (contentElements.length > 0) {\n                            var contentElement = contentElements[0];\n                            $el(contentElement).attr('tabindex', '-1').css('outline', '0');\n                            contentElement.focus();\n                        }\n                    },\n\n                    getFocusableElements: function ($dialog) {\n                        var dialogEl = $dialog[0];\n\n                        var rawElements = dialogEl.querySelectorAll(focusableElementSelector);\n\n                        // Ignore untabbable elements, ie. those with tabindex = -1\n                        var tabbableElements = privateMethods.filterTabbableElements(rawElements);\n\n                        return privateMethods.filterVisibleElements(tabbableElements);\n                    },\n\n                    filterTabbableElements: function (els) {\n                        var tabbableFocusableElements = [];\n\n                        for (var i = 0; i < els.length; i++) {\n                            var el = els[i];\n\n                            if ($el(el).attr('tabindex') !== '-1') {\n                                tabbableFocusableElements.push(el);\n                            }\n                        }\n\n                        return tabbableFocusableElements;\n                    },\n\n                    filterVisibleElements: function (els) {\n                        var visibleFocusableElements = [];\n\n                        for (var i = 0; i < els.length; i++) {\n                            var el = els[i];\n\n                            if (el.offsetWidth > 0 || el.offsetHeight > 0) {\n                                visibleFocusableElements.push(el);\n                            }\n                        }\n\n                        return visibleFocusableElements;\n                    },\n\n                    getActiveDialog: function () {\n                        var dialogs = document.querySelectorAll('.ngdialog');\n\n                        if (dialogs.length === 0) {\n                            return null;\n                        }\n\n                        // TODO: This might be incorrect if there are a mix of open dialogs with different 'appendTo' values\n                        return $el(dialogs[dialogs.length - 1]);\n                    },\n\n                    applyAriaAttributes: function ($dialog, options) {\n                        if (options.ariaAuto) {\n                            if (!options.ariaRole) {\n                                var detectedRole = (privateMethods.getFocusableElements($dialog).length > 0) ?\n                                    'dialog' :\n                                    'alertdialog';\n\n                                options.ariaRole = detectedRole;\n                            }\n\n                            if (!options.ariaLabelledBySelector) {\n                                options.ariaLabelledBySelector = 'h1,h2,h3,h4,h5,h6';\n                            }\n\n                            if (!options.ariaDescribedBySelector) {\n                                options.ariaDescribedBySelector = 'article,section,p';\n                            }\n                        }\n\n                        if (options.ariaRole) {\n                            $dialog.attr('role', options.ariaRole);\n                        }\n\n                        privateMethods.applyAriaAttribute(\n                            $dialog, 'aria-labelledby', options.ariaLabelledById, options.ariaLabelledBySelector);\n\n                        privateMethods.applyAriaAttribute(\n                            $dialog, 'aria-describedby', options.ariaDescribedById, options.ariaDescribedBySelector);\n                    },\n\n                    applyAriaAttribute: function($dialog, attr, id, selector) {\n                        if (id) {\n                            $dialog.attr(attr, id);\n                        }\n\n                        if (selector) {\n                            var dialogId = $dialog.attr('id');\n\n                            var firstMatch = $dialog[0].querySelector(selector);\n\n                            if (!firstMatch) {\n                                return;\n                            }\n\n                            var generatedId = dialogId + '-' + attr;\n\n                            $el(firstMatch).attr('id', generatedId);\n\n                            $dialog.attr(attr, generatedId);\n\n                            return generatedId;\n                        }\n                    },\n\n                    detectUIRouter: function() {\n                        //Detect if ui-router module is installed if not return false\n                        try {\n                            angular.module('ui.router');\n                            return true;\n                        } catch(err) {\n                            return false;\n                        }\n                    },\n\n                    getRouterLocationEventName: function() {\n                        if(privateMethods.detectUIRouter()) {\n                            return '$stateChangeSuccess';\n                        }\n                        return '$locationChangeSuccess';\n                    }\n                };\n\n                var publicMethods = {\n                    __PRIVATE__: privateMethods,\n\n                    /*\n                     * @param {Object} options:\n                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)\n                     * - plain {Boolean} - enable plain string templates, default false\n                     * - scope {Object}\n                     * - controller {String}\n                     * - controllerAs {String}\n                     * - className {String} - dialog theme class\n                     * - appendClassName {String} - dialog theme class to be appended to defaults\n                     * - disableAnimation {Boolean} - set to true to disable animation\n                     * - showClose {Boolean} - show close button, default true\n                     * - closeByEscape {Boolean} - default true\n                     * - closeByDocument {Boolean} - default true\n                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set)\n                     * - bodyClassName {String} - class added to body at open dialog\n                     * @return {Object} dialog\n                     */\n                    open: function (opts) {\n                        var dialogID = null;\n                        opts = opts || {};\n                        if (openOnePerName && opts.name) {\n                            dialogID = opts.name+' dialog';\n                            if (this.isOpen(dialogID)) {\n                                return;\n                            }\n                        }\n                        var options = angular.copy(defaults);\n                        var localID = ++globalID;\n                        dialogID = dialogID || 'ngdialog' + localID;\n                        openIdStack.push(dialogID);\n\n                        // Merge opts.data with predefined via setDefaults\n                        if (typeof options.data !== 'undefined') {\n                            if (typeof opts.data === 'undefined') {\n                                opts.data = {};\n                            }\n                            opts.data = angular.merge(angular.copy(options.data), opts.data);\n                        }\n\n                        angular.extend(options, opts);\n\n                        var defer;\n                        defers[dialogID] = defer = $q.defer();\n\n                        var scope;\n                        scopes[dialogID] = scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();\n\n                        var $dialog, $dialogParent;\n\n                        var resolve = angular.extend({}, options.resolve);\n\n                        angular.forEach(resolve, function (value, key) {\n                            resolve[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);\n                        });\n\n                        $q.all({\n                            template: loadTemplate(options.template || options.templateUrl),\n                            locals: $q.all(resolve)\n                        }).then(function (setup) {\n                            var template = setup.template,\n                                locals = setup.locals;\n\n                            if (options.showClose) {\n                                template += '<div class=\"ngdialog-close\"></div>';\n                            }\n\n                            var hasOverlayClass = options.overlay ? '' : ' ngdialog-no-overlay';\n                            $dialog = $el('<div id=\"'+dialogID + '\" class=\"ngdialog' + hasOverlayClass + '\"></div>');\n                            $dialog.html((options.overlay ?\n                                '<div class=\"ngdialog-overlay\"></div><div class=\"ngdialog-content\" role=\"document\">' + template + '</div>' :\n                                '<div class=\"ngdialog-content\" role=\"document\">' + template + '</div>'));\n\n                            $dialog.data('$ngDialogOptions', options);\n\n                            scope.ngDialogId = dialogID;\n\n                            if (options.data && angular.isString(options.data)) {\n                                var firstLetter = options.data.replace(/^\\s*/, '')[0];\n                                scope.ngDialogData = (firstLetter === '{' || firstLetter === '[') ? angular.fromJson(options.data) : new String(options.data);\n                                scope.ngDialogData.ngDialogId = dialogID;\n                            } else if (options.data && angular.isObject(options.data)) {\n                                scope.ngDialogData = options.data;\n                                scope.ngDialogData.ngDialogId = dialogID;\n                            }\n\n                            if (options.className) {\n                                $dialog.addClass(options.className);\n                            }\n\n                            if (options.appendClassName) {\n                                $dialog.addClass(options.appendClassName);\n                            }\n\n                            if (options.disableAnimation) {\n                                $dialog.addClass(disabledAnimationClass);\n                            }\n\n                            if (options.appendTo && angular.isString(options.appendTo)) {\n                                $dialogParent = angular.element(document.querySelector(options.appendTo));\n                            } else {\n                                $dialogParent = $elements.body;\n                            }\n\n                            privateMethods.applyAriaAttributes($dialog, options);\n\n                            if (options.preCloseCallback) {\n                                var preCloseCallback;\n\n                                if (angular.isFunction(options.preCloseCallback)) {\n                                    preCloseCallback = options.preCloseCallback;\n                                } else if (angular.isString(options.preCloseCallback)) {\n                                    if (scope) {\n                                        if (angular.isFunction(scope[options.preCloseCallback])) {\n                                            preCloseCallback = scope[options.preCloseCallback];\n                                        } else if (scope.$parent && angular.isFunction(scope.$parent[options.preCloseCallback])) {\n                                            preCloseCallback = scope.$parent[options.preCloseCallback];\n                                        } else if ($rootScope && angular.isFunction($rootScope[options.preCloseCallback])) {\n                                            preCloseCallback = $rootScope[options.preCloseCallback];\n                                        }\n                                    }\n                                }\n\n                                if (preCloseCallback) {\n                                    $dialog.data('$ngDialogPreCloseCallback', preCloseCallback);\n                                }\n                            }\n\n                            scope.closeThisDialog = function (value) {\n                                privateMethods.closeDialog($dialog, value);\n                            };\n\n                            if (options.controller && (angular.isString(options.controller) || angular.isArray(options.controller) || angular.isFunction(options.controller))) {\n\n                                var label;\n\n                                if (options.controllerAs && angular.isString(options.controllerAs)) {\n                                    label = options.controllerAs;\n                                }\n\n                                var controllerInstance = $controller(options.controller, angular.extend(\n                                    locals,\n                                    {\n                                        $scope: scope,\n                                        $element: $dialog\n                                    }),\n                                    true,\n                                    label\n                                );\n\n                                if(options.bindToController) {\n                                    angular.extend(controllerInstance.instance, {ngDialogId: scope.ngDialogId, ngDialogData: scope.ngDialogData, closeThisDialog: scope.closeThisDialog});\n                                }\n\n                                $dialog.data('$ngDialogControllerController', controllerInstance());\n                            }\n\n                            $timeout(function () {\n                                var $activeDialogs = document.querySelectorAll('.ngdialog');\n                                privateMethods.deactivateAll($activeDialogs);\n\n                                $compile($dialog)(scope);\n                                var widthDiffs = $window.innerWidth - $elements.body.prop('clientWidth');\n                                $elements.html.addClass(options.bodyClassName);\n                                $elements.body.addClass(options.bodyClassName);\n                                var scrollBarWidth = widthDiffs - ($window.innerWidth - $elements.body.prop('clientWidth'));\n                                if (scrollBarWidth > 0) {\n                                    privateMethods.setBodyPadding(scrollBarWidth);\n                                }\n                                $dialogParent.append($dialog);\n\n                                privateMethods.activate($dialog);\n\n                                if (options.trapFocus) {\n                                    privateMethods.autoFocus($dialog);\n                                }\n\n                                if (options.name) {\n                                    $rootScope.$broadcast('ngDialog.opened', {dialog: $dialog, name: options.name});\n                                } else {\n                                    $rootScope.$broadcast('ngDialog.opened', $dialog);\n                                }\n                            });\n\n                            if (!keydownIsBound) {\n                                $elements.body.bind('keydown', privateMethods.onDocumentKeydown);\n                                keydownIsBound = true;\n                            }\n\n                            if (options.closeByNavigation) {\n                                var eventName = privateMethods.getRouterLocationEventName();\n                                $rootScope.$on(eventName, function () {\n                                    privateMethods.closeDialog($dialog);\n                                });\n                            }\n\n                            if (options.preserveFocus) {\n                                $dialog.data('$ngDialogPreviousFocus', document.activeElement);\n                            }\n\n                            closeByDocumentHandler = function (event) {\n                                var isOverlay = options.closeByDocument ? $el(event.target).hasClass('ngdialog-overlay') : false;\n                                var isCloseBtn = $el(event.target).hasClass('ngdialog-close');\n\n                                if (isOverlay || isCloseBtn) {\n                                    publicMethods.close($dialog.attr('id'), isCloseBtn ? '$closeButton' : '$document');\n                                }\n                            };\n\n                            if (typeof $window.Hammer !== 'undefined') {\n                                var hammerTime = scope.hammerTime = $window.Hammer($dialog[0]);\n                                hammerTime.on('tap', closeByDocumentHandler);\n                            } else {\n                                $dialog.bind('click', closeByDocumentHandler);\n                            }\n\n                            dialogsCount += 1;\n\n                            return publicMethods;\n                        });\n\n                        return {\n                            id: dialogID,\n                            closePromise: defer.promise,\n                            close: function (value) {\n                                privateMethods.closeDialog($dialog, value);\n                            }\n                        };\n\n                        function loadTemplateUrl (tmpl, config) {\n                            $rootScope.$broadcast('ngDialog.templateLoading', tmpl);\n                            return $http.get(tmpl, (config || {})).then(function(res) {\n                                $rootScope.$broadcast('ngDialog.templateLoaded', tmpl);\n                                return res.data || '';\n                            });\n                        }\n\n                        function loadTemplate (tmpl) {\n                            if (!tmpl) {\n                                return 'Empty template';\n                            }\n\n                            if (angular.isString(tmpl) && options.plain) {\n                                return tmpl;\n                            }\n\n                            if (typeof options.cache === 'boolean' && !options.cache) {\n                                return loadTemplateUrl(tmpl, {cache: false});\n                            }\n\n                            return loadTemplateUrl(tmpl, {cache: $templateCache});\n                        }\n                    },\n\n                    /*\n                     * @param {Object} options:\n                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)\n                     * - plain {Boolean} - enable plain string templates, default false\n                     * - name {String}\n                     * - scope {Object}\n                     * - controller {String}\n                     * - controllerAs {String}\n                     * - className {String} - dialog theme class\n                     * - appendClassName {String} - dialog theme class to be appended to defaults\n                     * - showClose {Boolean} - show close button, default true\n                     * - closeByEscape {Boolean} - default false\n                     * - closeByDocument {Boolean} - default false\n                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set); not called on confirm\n                     * - bodyClassName {String} - class added to body at open dialog\n                     *\n                     * @return {Object} dialog\n                     */\n                    openConfirm: function (opts) {\n                        var defer = $q.defer();\n                        var options = angular.copy(defaults);\n\n                        opts = opts || {};\n\n                        // Merge opts.data with predefined via setDefaults\n                        if (typeof options.data !== 'undefined') {\n                            if (typeof opts.data === 'undefined') {\n                                opts.data = {};\n                            }\n                            opts.data = angular.merge(angular.copy(options.data), opts.data);\n                        }\n\n                        angular.extend(options, opts);\n\n                        options.scope = angular.isObject(options.scope) ? options.scope.$new() : $rootScope.$new();\n                        options.scope.confirm = function (value) {\n                            defer.resolve(value);\n                            var $dialog = $el(document.getElementById(openResult.id));\n                            privateMethods.performCloseDialog($dialog, value);\n                        };\n\n                        var openResult = publicMethods.open(options);\n                        if (openResult) {\n                            openResult.closePromise.then(function (data) {\n                                if (data) {\n                                    return defer.reject(data.value);\n                                }\n                                return defer.reject();\n                            });\n                            return defer.promise;\n                        }\n                    },\n\n                    isOpen: function(id) {\n                        var $dialog = $el(document.getElementById(id));\n                        return $dialog.length > 0;\n                    },\n\n                    /*\n                     * @param {String} id\n                     * @return {Object} dialog\n                     */\n                    close: function (id, value) {\n                        var $dialog = $el(document.getElementById(id));\n\n                        if ($dialog.length) {\n                            privateMethods.closeDialog($dialog, value);\n                        } else {\n                            if (id === '$escape') {\n                                var topDialogId = openIdStack[openIdStack.length - 1];\n                                $dialog = $el(document.getElementById(topDialogId));\n                                if ($dialog.data('$ngDialogOptions').closeByEscape) {\n                                    privateMethods.closeDialog($dialog, '$escape');\n                                }\n                            } else {\n                                publicMethods.closeAll(value);\n                            }\n                        }\n\n                        return publicMethods;\n                    },\n\n                    closeAll: function (value) {\n                        var $all = document.querySelectorAll('.ngdialog');\n\n                        // Reverse order to ensure focus restoration works as expected\n                        for (var i = $all.length - 1; i >= 0; i--) {\n                            var dialog = $all[i];\n                            privateMethods.closeDialog($el(dialog), value);\n                        }\n                    },\n\n                    getOpenDialogs: function() {\n                        return openIdStack;\n                    },\n\n                    getDefaults: function () {\n                        return defaults;\n                    }\n                };\n\n                angular.forEach(\n                    ['html', 'body'],\n                    function(elementName) {\n                        $elements[elementName] = $document.find(elementName);\n                        if (forceElementsReload[elementName]) {\n                            var eventName = privateMethods.getRouterLocationEventName();\n                            $rootScope.$on(eventName, function () {\n                                $elements[elementName] = $document.find(elementName);\n                            });\n                        }\n                    }\n                );\n\n                return publicMethods;\n            }];\n    });\n\n    m.directive('ngDialog', ['ngDialog', function (ngDialog) {\n        return {\n            restrict: 'A',\n            scope: {\n                ngDialogScope: '='\n            },\n            link: function (scope, elem, attrs) {\n                elem.on('click', function (e) {\n                    e.preventDefault();\n\n                    var ngDialogScope = angular.isDefined(scope.ngDialogScope) ? scope.ngDialogScope : 'noScope';\n                    angular.isDefined(attrs.ngDialogClosePrevious) && ngDialog.close(attrs.ngDialogClosePrevious);\n\n                    var defaults = ngDialog.getDefaults();\n\n                    ngDialog.open({\n                        template: attrs.ngDialog,\n                        className: attrs.ngDialogClass || defaults.className,\n                        appendClassName: attrs.ngDialogAppendClass,\n                        controller: attrs.ngDialogController,\n                        controllerAs: attrs.ngDialogControllerAs,\n                        bindToController: attrs.ngDialogBindToController,\n                        scope: ngDialogScope,\n                        data: attrs.ngDialogData,\n                        showClose: attrs.ngDialogShowClose === 'false' ? false : (attrs.ngDialogShowClose === 'true' ? true : defaults.showClose),\n                        closeByDocument: attrs.ngDialogCloseByDocument === 'false' ? false : (attrs.ngDialogCloseByDocument === 'true' ? true : defaults.closeByDocument),\n                        closeByEscape: attrs.ngDialogCloseByEscape === 'false' ? false : (attrs.ngDialogCloseByEscape === 'true' ? true : defaults.closeByEscape),\n                        overlay: attrs.ngDialogOverlay === 'false' ? false : (attrs.ngDialogOverlay === 'true' ? true : defaults.overlay),\n                        preCloseCallback: attrs.ngDialogPreCloseCallback || defaults.preCloseCallback,\n                        bodyClassName: attrs.ngDialogBodyClass || defaults.bodyClassName\n                    });\n                });\n            }\n        };\n    }]);\n\n    return m;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ng-dialog/js/ngDialog.js\n ** module id = 18\n ** module chunks = 0\n **/","// removed by extract-text-webpack-plugin\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ng-dialog/css/ngDialog.min.css\n ** module id = 19\n ** module chunks = 0\n **/","// removed by extract-text-webpack-plugin\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ng-dialog/css/ngDialog-theme-default.min.css\n ** module id = 20\n ** module chunks = 0\n **/","// removed by extract-text-webpack-plugin\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/app.global.css\n ** module id = 21\n ** module chunks = 0\n **/","// removed by extract-text-webpack-plugin\nmodule.exports = {\"editorDialog\":\"app__editorDialog___26F8J\",\"txtArea\":\"app__txtArea___W7egg\",\"app\":\"app__app___3V7nA\"};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/app.css\n ** module id = 22\n ** module chunks = 0\n **/"],"sourceRoot":""}